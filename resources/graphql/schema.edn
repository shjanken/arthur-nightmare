{:enums
 {:Symbol
  {:description "the lesson type.Should be 'garden', 'lesson' or 'word'"
   :values ["lesson" "word" "garden"]}}

 :objects
 {:Word
  {:description "The lesson what arthur study every day"
   :fields
   {:lesson_num {:type (non-null Int)
                 :description "The lesson number"}
    :grand {:type (non-null Int)
            :description "grand number"}
    :term {:type (non-null Int)
           :description "term number. just 1 or 2"}
    :symbol {:type (non-null :Symbol)
             :description "type of lesson. 1 :- lesson, 2 :- word , 3 :- garden"}
    :context {:type (non-null String)
              :description "context of every lesson"}
    :py {:type String
         :description "py of context. format is 'context:(1,2,3,4)'"}
    :id {:type (non-null ID)}
    :ord {:type Int}}}

  :Lesson
  {:description "list of words, contain all word of current lesson"
   :fields {:words {:type (list :Word)
                    :descritpion "words of current lesson"}
            :min_id {:type Int
                     :description "the minimum id of word in this lesson"
                     :resolve :query/lesson-min-id}
            :max_id {:type Int
                     :description "the maximun id of word in this lesson"
                     :resolve :query/lesson-max-id}}}

  :Phrase
  {:description "the return type of phrase"
   :fields {:context {:type String
                      :description "the context compose with word"}
            :main_id {:type Int
                      :description "the first word id in the table"}
            :ranger_id {:type Int
                        :description "the second word id in the table"}}}}

 :queries
 {:word_by_id
  {:type :Word
   :description "query the lesson info by id"
   :args {:id {:type ID}}
   :resolve :query/word-by-id}

  :lesson_by_detail
  {:type :Lesson
   :description "query the lesson by detail info.
the gtls is: grand, term, lesson, symbol"
   :args {:lesson_num {:type (non-null Int) :description "lesson number"}
          :grand {:type (non-null Int) :description "grand number"}
          :term {:type (non-null Int) :description "term number"}
          :symbol {:type (non-null :Symbol)
                   :description "the value is lesson or word or garden"}}
   :resolve :query/lesson-by-detail}

  :words_by_id_range
  {:type (list :Word)
   :description "query the word between start id and end id"
   :args {:begin {:type (non-null Int)
                  :description "the query begin with"}
          :end {:type (non-null Int)
                :description "the query end with"}}
   :resolve :query/words-by-range}

  :query_phrases
  {:type (list :Phrase)
   :description "query the phrase compose with current lesson's words and the word in range"
   :args {:grand {:type (non-null Int) :description "the grand"}
          :term {:type (non-null Int) :description "the term"}
          :symbol {:type (non-null :Symbol) :description "the symbol of the lesson"}
          :lesson_num {:type (non-null Int) :description "lesson num"}
          :begin {:type (non-null Int) :description "begin id of ranger"}
          :end {:type (non-null Int) :description "end id of ranger"}}
   :resolve :query/phrase}}

 :mutations
 {:word
  {:type Int
   :description "add a word record to the database"
   :args {:grand {:type (non-null Int)}
          :term {:type (non-null Int)}
          :symbol {:type (non-null :Symbol)}
          :lesson_num {:type (non-null Int)}
          :context {:type (non-null String)}
          :py {:type (non-null String)}
          :ord {:type (non-null Int)}}
   :resolve :mutation/word}}}
